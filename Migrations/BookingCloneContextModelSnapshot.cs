// <auto-generated />
using System;
using BookingClone.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookingClone.Migrations
{
    [DbContext(typeof(BookingCloneContext))]
    partial class BookingCloneContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookingClone.Models.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Agencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Commission = 15.00m,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 538, DateTimeKind.Utc).AddTicks(9748),
                            IsDeleted = false,
                            Name = "Todoric"
                        },
                        new
                        {
                            Id = 2,
                            Commission = 20.00m,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 539, DateTimeKind.Utc).AddTicks(594),
                            IsDeleted = false,
                            Name = "Airbnb"
                        },
                        new
                        {
                            Id = 3,
                            Commission = 23.00m,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 539, DateTimeKind.Utc).AddTicks(603),
                            IsDeleted = false,
                            Name = "Booking"
                        },
                        new
                        {
                            Id = 4,
                            Commission = 17.50m,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 539, DateTimeKind.Utc).AddTicks(604),
                            IsDeleted = false,
                            Name = "Trivago"
                        });
                });

            modelBuilder.Entity("BookingClone.Models.AuthUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime?>("Birthdate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("LastName");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1987, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ff369b55-53e4-409f-80a8-9bc3253c2133",
                            Email = "radekoncar@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Rade",
                            Gender = "M",
                            LastName = "Končar",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEKpWL+mTkRIKPkqPjoHlMayEDAhsILHpdb45yUXnTeCUMcx2Evzj6si4FmKAGJtk/g==",
                            PhoneNumber = "0917453456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1982, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f4c93c7c-7b10-4aff-99b5-b332cade23ba",
                            Email = "antemastelic@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ante",
                            Gender = "M",
                            LastName = "Mastelić",
                            LockoutEnabled = false,
                            PhoneNumber = "0924567484",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1991, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3a28d468-52bd-4609-a8db-24229c3b2f08",
                            Email = "miadimsic@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mia",
                            Gender = "F",
                            LastName = "Dimšić",
                            LockoutEnabled = false,
                            PhoneNumber = "0959375035",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1982, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "486bf39a-4fb0-4038-9b0d-2692910ed85e",
                            Email = "hrvojehorvat@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Hrvoje",
                            Gender = "M",
                            LastName = "Horvat",
                            LockoutEnabled = false,
                            PhoneNumber = "0983765905",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("BookingClone.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyId");

                    b.Property<DateTime>("CheckIn");

                    b.Property<DateTime>("CheckOut");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("PaymentId");

                    b.Property<int>("RoomId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgencyId = 1,
                            CheckIn = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2019, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 560, DateTimeKind.Utc).AddTicks(4166),
                            IsDeleted = false,
                            RoomId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AgencyId = 2,
                            CheckIn = new DateTime(2019, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2019, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 560, DateTimeKind.Utc).AddTicks(6592),
                            IsDeleted = false,
                            RoomId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AgencyId = 3,
                            CheckIn = new DateTime(2019, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2019, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 560, DateTimeKind.Utc).AddTicks(6638),
                            IsDeleted = false,
                            RoomId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            AgencyId = 4,
                            CheckIn = new DateTime(2019, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2019, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 560, DateTimeKind.Utc).AddTicks(6648),
                            IsDeleted = false,
                            RoomId = 4,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("BookingClone.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("WebAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Ulica Izidora Kršnjavog 1",
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 539, DateTimeKind.Utc).AddTicks(6790),
                            IsDeleted = false,
                            Name = "Westin",
                            PhoneNumber = "38514892000",
                            WebAddress = "www.westinzagreb.com"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Miramarska Cesta 24",
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 539, DateTimeKind.Utc).AddTicks(8815),
                            IsDeleted = false,
                            Name = "International",
                            PhoneNumber = "38516108800",
                            WebAddress = "www.hotel-international.hr"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Trg Krešimira Ćosića 9",
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 539, DateTimeKind.Utc).AddTicks(8843),
                            IsDeleted = false,
                            Name = "Esplanade",
                            PhoneNumber = "38514566600",
                            WebAddress = "www.esplanade.hr"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Trg Josipa Jurja Strossmayera 10",
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 539, DateTimeKind.Utc).AddTicks(8844),
                            IsDeleted = false,
                            Name = "Palace",
                            PhoneNumber = "38514899600",
                            WebAddress = "www.palace.hr"
                        });
                });

            modelBuilder.Entity("BookingClone.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Price");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgencyId = 1,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 561, DateTimeKind.Utc).AddTicks(2761),
                            IsDeleted = false,
                            Price = 0m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AgencyId = 2,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 561, DateTimeKind.Utc).AddTicks(3866),
                            IsDeleted = false,
                            Price = 0m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AgencyId = 3,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 561, DateTimeKind.Utc).AddTicks(3876),
                            IsDeleted = false,
                            Price = 0m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            AgencyId = 4,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 561, DateTimeKind.Utc).AddTicks(3877),
                            IsDeleted = false,
                            Price = 0m,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("BookingClone.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("HotelId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NumberOfBeds");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 541, DateTimeKind.Utc).AddTicks(9977),
                            HotelId = 1,
                            IsDeleted = false,
                            NumberOfBeds = 2,
                            PricePerNight = 100.00m,
                            RoomNumber = "101",
                            Size = 34.42m,
                            Type = "Double"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 542, DateTimeKind.Utc).AddTicks(1630),
                            HotelId = 2,
                            IsDeleted = false,
                            NumberOfBeds = 2,
                            PricePerNight = 200.00m,
                            RoomNumber = "202",
                            Size = 42.12m,
                            Type = "Suite"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 542, DateTimeKind.Utc).AddTicks(1649),
                            HotelId = 3,
                            IsDeleted = false,
                            NumberOfBeds = 4,
                            PricePerNight = 300.00m,
                            RoomNumber = "301",
                            Size = 54.66m,
                            Type = "Quad"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 542, DateTimeKind.Utc).AddTicks(1651),
                            HotelId = 4,
                            IsDeleted = false,
                            NumberOfBeds = 4,
                            PricePerNight = 400.00m,
                            RoomNumber = "202",
                            Size = 73.81m,
                            Type = "Executive"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 542, DateTimeKind.Utc).AddTicks(1652),
                            HotelId = 1,
                            IsDeleted = false,
                            NumberOfBeds = 2,
                            PricePerNight = 100.00m,
                            RoomNumber = "102",
                            Size = 33.77m,
                            Type = "Double"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 542, DateTimeKind.Utc).AddTicks(1653),
                            HotelId = 2,
                            IsDeleted = false,
                            NumberOfBeds = 2,
                            PricePerNight = 200.00m,
                            RoomNumber = "204",
                            Size = 36.46m,
                            Type = "Suite"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 542, DateTimeKind.Utc).AddTicks(1654),
                            HotelId = 3,
                            IsDeleted = false,
                            NumberOfBeds = 4,
                            PricePerNight = 300.00m,
                            RoomNumber = "304",
                            Size = 65.45m,
                            Type = "Quad"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 542, DateTimeKind.Utc).AddTicks(1655),
                            HotelId = 4,
                            IsDeleted = false,
                            NumberOfBeds = 4,
                            PricePerNight = 400.00m,
                            RoomNumber = "206",
                            Size = 75.64m,
                            Type = "Executive"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 542, DateTimeKind.Utc).AddTicks(1656),
                            HotelId = 1,
                            IsDeleted = false,
                            NumberOfBeds = 2,
                            PricePerNight = 100.00m,
                            RoomNumber = "103",
                            Size = 43.46m,
                            Type = "Double"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 542, DateTimeKind.Utc).AddTicks(1657),
                            HotelId = 2,
                            IsDeleted = false,
                            NumberOfBeds = 2,
                            PricePerNight = 200.00m,
                            RoomNumber = "206",
                            Size = 34.64m,
                            Type = "Suite"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 542, DateTimeKind.Utc).AddTicks(1704),
                            HotelId = 3,
                            IsDeleted = false,
                            NumberOfBeds = 4,
                            PricePerNight = 300.00m,
                            RoomNumber = "305",
                            Size = 53.66m,
                            Type = "Quad"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2019, 8, 28, 9, 24, 11, 542, DateTimeKind.Utc).AddTicks(1705),
                            HotelId = 4,
                            IsDeleted = false,
                            NumberOfBeds = 4,
                            PricePerNight = 400.00m,
                            RoomNumber = "208",
                            Size = 79.45m,
                            Type = "Executive"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BookingClone.Models.Booking", b =>
                {
                    b.HasOne("BookingClone.Models.Agency", "Agency")
                        .WithMany("Bookings")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BookingClone.Models.Payment")
                        .WithMany("Bookings")
                        .HasForeignKey("PaymentId");

                    b.HasOne("BookingClone.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BookingClone.Models.AuthUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BookingClone.Models.Payment", b =>
                {
                    b.HasOne("BookingClone.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BookingClone.Models.AuthUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BookingClone.Models.Room", b =>
                {
                    b.HasOne("BookingClone.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BookingClone.Models.AuthUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BookingClone.Models.AuthUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookingClone.Models.AuthUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BookingClone.Models.AuthUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
